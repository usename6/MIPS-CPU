;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.16, builtAtString: 2017-10-06 20:55:20.367, builtAtMillis: 1507323320367
circuit Top : 
  module CtlPath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Inst : UInt<32>, flip boot : UInt<1>, MemWr : UInt<1>, valid : UInt<1>, ctl : {nPC_sel : UInt<1>, RegWr : UInt<1>, RegDst : UInt<1>, ExtOp : UInt<1>, ALUctr : UInt<3>, ALUsrc : UInt<1>, MemtoReg : UInt<1>, Rd : UInt<5>, Rt : UInt<5>, Rs : UInt<5>, Imm16 : UInt<16>, Imm26 : UInt<26>}, flip dat : {zero : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.MemWr <= UInt<1>("h00") @[CtlPath.scala 46:18]
    io.valid <= UInt<1>("h01") @[CtlPath.scala 47:18]
    io.ctl.RegWr <= UInt<1>("h00") @[CtlPath.scala 48:22]
    wire ctl_signle : UInt<11> @[CtlPath.scala 49:31]
    ctl_signle is invalid @[CtlPath.scala 49:31]
    wire Jump : UInt<1> @[CtlPath.scala 51:39]
    Jump is invalid @[CtlPath.scala 51:39]
    wire ALUop : UInt<3> @[CtlPath.scala 52:39]
    ALUop is invalid @[CtlPath.scala 52:39]
    wire ALUctr2 : UInt<1> @[CtlPath.scala 53:39]
    ALUctr2 is invalid @[CtlPath.scala 53:39]
    wire ALUctr1 : UInt<1> @[CtlPath.scala 54:39]
    ALUctr1 is invalid @[CtlPath.scala 54:39]
    wire ALUctr0 : UInt<1> @[CtlPath.scala 55:39]
    ALUctr0 is invalid @[CtlPath.scala 55:39]
    node _T_30 = bits(ctl_signle, 10, 10) @[CtlPath.scala 60:46]
    io.ctl.RegDst <= _T_30 @[CtlPath.scala 60:33]
    node _T_31 = bits(ctl_signle, 9, 9) @[CtlPath.scala 61:46]
    io.ctl.ALUsrc <= _T_31 @[CtlPath.scala 61:33]
    node _T_32 = bits(ctl_signle, 8, 8) @[CtlPath.scala 62:46]
    io.ctl.MemtoReg <= _T_32 @[CtlPath.scala 62:33]
    node _T_33 = bits(ctl_signle, 7, 7) @[CtlPath.scala 63:46]
    io.ctl.RegWr <= _T_33 @[CtlPath.scala 63:33]
    node _T_34 = bits(ctl_signle, 6, 6) @[CtlPath.scala 64:54]
    io.MemWr <= _T_34 @[CtlPath.scala 64:41]
    node _T_36 = bits(ctl_signle, 5, 5) @[CtlPath.scala 66:69]
    node _T_37 = bits(ctl_signle, 5, 5) @[CtlPath.scala 66:99]
    node _T_38 = and(io.dat.zero, _T_37) @[CtlPath.scala 66:87]
    node _T_39 = mux(Jump, _T_36, _T_38) @[CtlPath.scala 66:52]
    node _T_40 = mux(io.boot, UInt<1>("h00"), _T_39) @[CtlPath.scala 65:39]
    io.ctl.nPC_sel <= _T_40 @[CtlPath.scala 65:33]
    node _T_41 = bits(ctl_signle, 4, 4) @[CtlPath.scala 67:54]
    Jump <= _T_41 @[CtlPath.scala 67:41]
    node _T_42 = bits(ctl_signle, 3, 3) @[CtlPath.scala 68:46]
    io.ctl.ExtOp <= _T_42 @[CtlPath.scala 68:33]
    node _T_43 = bits(ctl_signle, 2, 0) @[CtlPath.scala 69:54]
    ALUop <= _T_43 @[CtlPath.scala 69:41]
    node _T_46 = bits(io.Inst, 31, 26) @[CtlPath.scala 73:33]
    node _T_48 = eq(_T_46, UInt<6>("h00")) @[CtlPath.scala 73:42]
    node _T_50 = neq(io.Inst, UInt<1>("h00")) @[CtlPath.scala 73:74]
    node _T_51 = and(_T_48, _T_50) @[CtlPath.scala 73:63]
    node _T_53 = bits(io.Inst, 31, 26) @[CtlPath.scala 75:33]
    node _T_55 = eq(_T_53, UInt<6>("h0d")) @[CtlPath.scala 75:42]
    node _T_57 = bits(io.Inst, 31, 26) @[CtlPath.scala 76:33]
    node _T_59 = eq(_T_57, UInt<6>("h023")) @[CtlPath.scala 76:42]
    node _T_61 = bits(io.Inst, 31, 26) @[CtlPath.scala 77:33]
    node _T_63 = eq(_T_61, UInt<6>("h02b")) @[CtlPath.scala 77:42]
    node _T_65 = bits(io.Inst, 31, 26) @[CtlPath.scala 78:33]
    node _T_67 = eq(_T_65, UInt<6>("h04")) @[CtlPath.scala 78:42]
    node _T_69 = bits(io.Inst, 31, 26) @[CtlPath.scala 79:33]
    node _T_71 = eq(_T_69, UInt<6>("h02")) @[CtlPath.scala 79:42]
    node _T_74 = eq(io.Inst, UInt<1>("h00")) @[CtlPath.scala 80:34]
    node _T_76 = mux(_T_74, UInt<1>("h00"), UInt<11>("h07ff")) @[Mux.scala 61:16]
    node _T_77 = mux(_T_71, UInt<11>("h037"), _T_76) @[Mux.scala 61:16]
    node _T_78 = mux(_T_67, UInt<11>("h029"), _T_77) @[Mux.scala 61:16]
    node _T_79 = mux(_T_63, UInt<11>("h0248"), _T_78) @[Mux.scala 61:16]
    node _T_80 = mux(_T_59, UInt<11>("h0388"), _T_79) @[Mux.scala 61:16]
    node _T_81 = mux(_T_55, UInt<11>("h0282"), _T_80) @[Mux.scala 61:16]
    node _T_82 = mux(_T_51, UInt<11>("h0484"), _T_81) @[Mux.scala 61:16]
    node _T_83 = mux(io.boot, UInt<11>("h08"), _T_82) @[CtlPath.scala 71:26]
    ctl_signle <= _T_83 @[CtlPath.scala 71:20]
    node _T_84 = bits(reset, 0, 0) @[CtlPath.scala 82:15]
    node _T_86 = eq(_T_84, UInt<1>("h00")) @[CtlPath.scala 82:15]
    when _T_86 : @[CtlPath.scala 82:15]
      printf(clock, UInt<1>(1), "ctl_signle = %x\n", ctl_signle) @[CtlPath.scala 82:15]
      skip @[CtlPath.scala 82:15]
    node _T_88 = eq(ctl_signle, UInt<11>("h07ff")) @[CtlPath.scala 83:36]
    node _T_91 = mux(_T_88, UInt<1>("h00"), UInt<1>("h01")) @[CtlPath.scala 83:24]
    io.valid <= _T_91 @[CtlPath.scala 83:18]
    node _T_92 = bits(ALUop, 2, 2) @[CtlPath.scala 85:26]
    node _T_93 = not(_T_92) @[CtlPath.scala 85:20]
    node _T_94 = bits(ALUop, 0, 0) @[CtlPath.scala 85:37]
    node _T_95 = and(_T_93, _T_94) @[CtlPath.scala 85:30]
    node _T_96 = bits(ALUop, 2, 2) @[CtlPath.scala 85:49]
    node _T_97 = bits(io.Inst, 2, 2) @[CtlPath.scala 85:63]
    node _T_98 = not(_T_97) @[CtlPath.scala 85:55]
    node _T_99 = and(_T_96, _T_98) @[CtlPath.scala 85:53]
    node _T_100 = bits(io.Inst, 1, 1) @[CtlPath.scala 86:58]
    node _T_101 = and(_T_99, _T_100) @[CtlPath.scala 86:49]
    node _T_102 = bits(io.Inst, 0, 0) @[CtlPath.scala 86:72]
    node _T_103 = not(_T_102) @[CtlPath.scala 86:64]
    node _T_104 = and(_T_101, _T_103) @[CtlPath.scala 86:62]
    node _T_105 = or(_T_95, _T_104) @[CtlPath.scala 85:41]
    ALUctr2 <= _T_105 @[CtlPath.scala 85:17]
    node _T_106 = bits(ALUop, 2, 2) @[CtlPath.scala 87:26]
    node _T_107 = not(_T_106) @[CtlPath.scala 87:20]
    node _T_108 = bits(ALUop, 1, 1) @[CtlPath.scala 87:38]
    node _T_109 = not(_T_108) @[CtlPath.scala 87:32]
    node _T_110 = and(_T_107, _T_109) @[CtlPath.scala 87:30]
    node _T_111 = bits(ALUop, 2, 2) @[CtlPath.scala 87:50]
    node _T_112 = bits(io.Inst, 2, 2) @[CtlPath.scala 87:64]
    node _T_113 = not(_T_112) @[CtlPath.scala 87:56]
    node _T_114 = and(_T_111, _T_113) @[CtlPath.scala 87:54]
    node _T_115 = bits(io.Inst, 0, 0) @[CtlPath.scala 87:78]
    node _T_116 = not(_T_115) @[CtlPath.scala 87:70]
    node _T_117 = and(_T_114, _T_116) @[CtlPath.scala 87:68]
    node _T_118 = or(_T_110, _T_117) @[CtlPath.scala 87:42]
    ALUctr1 <= _T_118 @[CtlPath.scala 87:17]
    node _T_119 = bits(ALUop, 2, 2) @[CtlPath.scala 88:26]
    node _T_120 = not(_T_119) @[CtlPath.scala 88:20]
    node _T_121 = bits(ALUop, 1, 1) @[CtlPath.scala 88:37]
    node _T_122 = and(_T_120, _T_121) @[CtlPath.scala 88:30]
    node _T_123 = bits(ALUop, 2, 2) @[CtlPath.scala 89:55]
    node _T_124 = bits(io.Inst, 3, 3) @[CtlPath.scala 89:69]
    node _T_125 = not(_T_124) @[CtlPath.scala 89:61]
    node _T_126 = and(_T_123, _T_125) @[CtlPath.scala 89:59]
    node _T_127 = bits(io.Inst, 2, 2) @[CtlPath.scala 89:82]
    node _T_128 = and(_T_126, _T_127) @[CtlPath.scala 89:73]
    node _T_129 = bits(io.Inst, 1, 1) @[CtlPath.scala 89:96]
    node _T_130 = not(_T_129) @[CtlPath.scala 89:88]
    node _T_131 = and(_T_128, _T_130) @[CtlPath.scala 89:86]
    node _T_132 = bits(io.Inst, 0, 0) @[CtlPath.scala 89:109]
    node _T_133 = and(_T_131, _T_132) @[CtlPath.scala 89:100]
    node _T_134 = or(_T_122, _T_133) @[CtlPath.scala 88:41]
    node _T_135 = bits(ALUop, 2, 2) @[CtlPath.scala 90:55]
    node _T_136 = bits(io.Inst, 3, 3) @[CtlPath.scala 90:68]
    node _T_137 = and(_T_135, _T_136) @[CtlPath.scala 90:59]
    node _T_138 = bits(io.Inst, 2, 2) @[CtlPath.scala 90:82]
    node _T_139 = not(_T_138) @[CtlPath.scala 90:74]
    node _T_140 = and(_T_137, _T_139) @[CtlPath.scala 90:72]
    node _T_141 = bits(io.Inst, 1, 1) @[CtlPath.scala 90:95]
    node _T_142 = and(_T_140, _T_141) @[CtlPath.scala 90:86]
    node _T_143 = bits(io.Inst, 0, 0) @[CtlPath.scala 90:109]
    node _T_144 = not(_T_143) @[CtlPath.scala 90:101]
    node _T_145 = and(_T_142, _T_144) @[CtlPath.scala 90:99]
    node _T_146 = or(_T_134, _T_145) @[CtlPath.scala 89:114]
    ALUctr0 <= _T_146 @[CtlPath.scala 88:17]
    node _T_148 = eq(ctl_signle, UInt<11>("h08")) @[CtlPath.scala 91:41]
    node _T_151 = eq(io.Inst, UInt<1>("h00")) @[CtlPath.scala 92:61]
    node _T_153 = cat(ALUctr2, ALUctr1) @[Cat.scala 30:58]
    node _T_154 = cat(_T_153, ALUctr0) @[Cat.scala 30:58]
    node _T_155 = mux(_T_151, UInt<1>("h00"), _T_154) @[CtlPath.scala 92:52]
    node _T_156 = mux(_T_148, UInt<2>("h03"), _T_155) @[CtlPath.scala 91:29]
    io.ctl.ALUctr <= _T_156 @[CtlPath.scala 91:23]
    node _T_158 = eq(ALUop, UInt<3>("h04")) @[CtlPath.scala 95:37]
    node _T_160 = eq(Jump, UInt<1>("h01")) @[CtlPath.scala 95:55]
    node _T_161 = or(_T_158, _T_160) @[CtlPath.scala 95:46]
    node _T_163 = bits(io.Inst, 15, 0) @[CtlPath.scala 95:81]
    node _T_164 = mux(_T_161, UInt<1>("h00"), _T_163) @[CtlPath.scala 95:28]
    io.ctl.Imm16 <= _T_164 @[CtlPath.scala 95:22]
    node _T_166 = eq(Jump, UInt<1>("h01")) @[CtlPath.scala 96:35]
    node _T_167 = bits(io.Inst, 25, 0) @[CtlPath.scala 96:55]
    node _T_169 = mux(_T_166, _T_167, UInt<1>("h00")) @[CtlPath.scala 96:28]
    io.ctl.Imm26 <= _T_169 @[CtlPath.scala 96:22]
    node _T_170 = bits(io.Inst, 25, 21) @[CtlPath.scala 98:29]
    io.ctl.Rs <= _T_170 @[CtlPath.scala 98:19]
    node _T_171 = bits(io.Inst, 20, 16) @[CtlPath.scala 99:29]
    io.ctl.Rt <= _T_171 @[CtlPath.scala 99:19]
    node _T_172 = bits(io.Inst, 15, 11) @[CtlPath.scala 100:29]
    io.ctl.Rd <= _T_172 @[CtlPath.scala 100:19]
    
  module ALU9 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in1 : UInt<32>, flip in2 : UInt<32>, flip ALUctr : UInt<3>, ALUout : UInt<32>, cmp_out : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_8 = eq(io.ALUctr, UInt<3>("h06")) @[ALU.scala 79:33]
    node _T_10 = eq(io.ALUctr, UInt<3>("h07")) @[ALU.scala 79:53]
    node _T_11 = or(_T_8, _T_10) @[ALU.scala 79:45]
    node _T_12 = not(io.in2) @[ALU.scala 97:45]
    node in2_inv = mux(_T_11, _T_12, io.in2) @[ALU.scala 97:26]
    node in1_xor_in2 = xor(io.in1, io.in2) @[ALU.scala 98:34]
    node _T_13 = add(io.in1, in2_inv) @[ALU.scala 99:32]
    node _T_14 = tail(_T_13, 1) @[ALU.scala 99:32]
    node _T_16 = eq(io.ALUctr, UInt<3>("h06")) @[ALU.scala 79:33]
    node _T_18 = eq(io.ALUctr, UInt<3>("h07")) @[ALU.scala 79:53]
    node _T_19 = or(_T_16, _T_18) @[ALU.scala 79:45]
    node _T_20 = add(_T_14, _T_19) @[ALU.scala 99:42]
    node adder_out = tail(_T_20, 1) @[ALU.scala 99:42]
    node _T_22 = eq(io.ALUctr, UInt<3>("h06")) @[ALU.scala 105:37]
    node _T_24 = eq(in1_xor_in2, UInt<1>("h00")) @[ALU.scala 105:61]
    node _T_25 = bits(io.in1, 31, 31) @[ALU.scala 106:27]
    node _T_26 = bits(io.in2, 31, 31) @[ALU.scala 106:41]
    node _T_27 = neq(_T_25, _T_26) @[ALU.scala 106:32]
    node _T_28 = bits(adder_out, 31, 31) @[ALU.scala 106:56]
    node _T_29 = bits(adder_out, 31, 31) @[ALU.scala 107:30]
    node _T_32 = mux(_T_29, UInt<1>("h01"), UInt<1>("h00")) @[ALU.scala 107:20]
    node _T_33 = mux(_T_27, _T_28, _T_32) @[ALU.scala 106:20]
    node _T_34 = mux(_T_22, _T_24, _T_33) @[ALU.scala 105:26]
    io.cmp_out <= _T_34 @[ALU.scala 105:20]
    node _T_36 = eq(io.ALUctr, UInt<3>("h01")) @[ALU.scala 110:35]
    node _T_38 = mux(_T_36, in1_xor_in2, UInt<1>("h00")) @[ALU.scala 110:24]
    node _T_40 = eq(io.ALUctr, UInt<3>("h01")) @[ALU.scala 111:19]
    node _T_42 = eq(io.ALUctr, UInt<3>("h00")) @[ALU.scala 111:42]
    node _T_43 = or(_T_40, _T_42) @[ALU.scala 111:29]
    node _T_44 = and(io.in1, io.in2) @[ALU.scala 111:61]
    node _T_46 = mux(_T_43, _T_44, UInt<1>("h00")) @[ALU.scala 111:8]
    node logic_out = or(_T_38, _T_46) @[ALU.scala 110:64]
    node _T_48 = eq(io.ALUctr, UInt<3>("h02")) @[ALU.scala 113:29]
    node _T_50 = eq(io.ALUctr, UInt<3>("h06")) @[ALU.scala 113:53]
    node _T_51 = or(_T_48, _T_50) @[ALU.scala 113:40]
    node out = mux(_T_51, adder_out, logic_out) @[ALU.scala 113:18]
    io.ALUout <= out @[ALU.scala 116:15]
    
  module DatPath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {imem_addr : UInt<32>, dmem_addr : UInt<32>, dmem_datIn : UInt<32>, flip dmem_datOut : UInt<32>, flip ctl : {nPC_sel : UInt<1>, RegWr : UInt<1>, RegDst : UInt<1>, ExtOp : UInt<1>, ALUctr : UInt<3>, ALUsrc : UInt<1>, MemtoReg : UInt<1>, Rd : UInt<5>, Rt : UInt<5>, Rs : UInt<5>, Imm16 : UInt<16>, Imm26 : UInt<26>}, dat : {zero : UInt<1>}}
    
    clock is invalid
    reset is invalid
    io is invalid
    wire BusA : UInt<32> @[DatPath.scala 39:31]
    BusA is invalid @[DatPath.scala 39:31]
    wire BusB : UInt<32> @[DatPath.scala 40:31]
    BusB is invalid @[DatPath.scala 40:31]
    wire BusWr : UInt<32> @[DatPath.scala 41:31]
    BusWr is invalid @[DatPath.scala 41:31]
    wire pc_next : UInt<32> @[DatPath.scala 42:27]
    pc_next is invalid @[DatPath.scala 42:27]
    wire pc_plus4 : UInt<32> @[DatPath.scala 43:27]
    pc_plus4 is invalid @[DatPath.scala 43:27]
    wire pc_br : UInt<32> @[DatPath.scala 44:31]
    pc_br is invalid @[DatPath.scala 44:31]
    inst alu9 of ALU9 @[DatPath.scala 46:26]
    alu9.io is invalid
    alu9.clock <= clock
    alu9.reset <= reset
    reg pc_reg : UInt, clock with : (reset => (reset, UInt<32>("h00"))) @[DatPath.scala 48:29]
    pc_reg <= pc_next @[DatPath.scala 48:29]
    cmem RegFile : UInt<32>[32] @[DatPath.scala 50:26]
    infer mport _T_43 = RegFile[UInt<1>("h00")], clock
    _T_43 <= UInt<1>("h00") @[DatPath.scala 53:20]
    infer mport _T_45 = RegFile[io.ctl.Rs], clock
    BusA <= _T_45 @[DatPath.scala 56:14]
    infer mport _T_46 = RegFile[io.ctl.Rt], clock
    BusB <= _T_46 @[DatPath.scala 57:14]
    node reg_indx = mux(io.ctl.RegDst, io.ctl.Rd, io.ctl.Rt) @[DatPath.scala 59:27]
    node _T_48 = eq(io.ctl.RegWr, UInt<1>("h01")) @[DatPath.scala 62:28]
    when _T_48 : @[DatPath.scala 62:40]
      infer mport _T_49 = RegFile[reg_indx], clock
      _T_49 <= BusWr @[DatPath.scala 63:35]
      skip @[DatPath.scala 62:40]
    node _T_50 = mux(io.ctl.MemtoReg, io.dmem_datOut, alu9.io.ALUout) @[DatPath.scala 66:21]
    BusWr <= _T_50 @[DatPath.scala 66:15]
    node _T_51 = bits(io.ctl.Imm16, 15, 15) @[DatPath.scala 71:47]
    node _T_52 = bits(_T_51, 0, 0) @[Bitwise.scala 72:15]
    node _T_55 = mux(_T_52, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 72:12]
    node _T_56 = bits(io.ctl.Imm16, 14, 0) @[DatPath.scala 71:66]
    node _T_57 = bits(io.ctl.Imm16, 15, 15) @[DatPath.scala 71:95]
    node _T_58 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
    node _T_61 = mux(_T_58, UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 72:12]
    node _T_62 = cat(_T_55, _T_56) @[Cat.scala 30:58]
    node br_sext = cat(_T_62, _T_61) @[Cat.scala 30:58]
    node _T_63 = bits(pc_reg, 31, 28) @[DatPath.scala 72:34]
    node _T_65 = cat(_T_63, io.ctl.Imm26) @[Cat.scala 30:58]
    node j_target = cat(_T_65, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_66 = bits(io.ctl.Imm16, 15, 15) @[DatPath.scala 73:70]
    node _T_67 = bits(_T_66, 0, 0) @[Bitwise.scala 72:15]
    node _T_70 = mux(_T_67, UInt<17>("h01ffff"), UInt<17>("h00")) @[Bitwise.scala 72:12]
    node _T_71 = bits(io.ctl.Imm16, 14, 0) @[DatPath.scala 73:89]
    node _T_72 = cat(_T_70, _T_71) @[Cat.scala 30:58]
    node _T_74 = bits(io.ctl.Imm16, 15, 0) @[DatPath.scala 74:71]
    node _T_75 = cat(UInt<16>("h00"), _T_74) @[Cat.scala 30:58]
    node Imm32 = mux(io.ctl.ExtOp, _T_72, _T_75) @[DatPath.scala 73:30]
    io.imem_addr <= pc_reg @[DatPath.scala 76:22]
    node _T_77 = add(pc_reg, UInt<32>("h04")) @[DatPath.scala 79:28]
    node _T_78 = tail(_T_77, 1) @[DatPath.scala 79:28]
    pc_plus4 <= _T_78 @[DatPath.scala 79:18]
    node _T_79 = add(pc_reg, br_sext) @[DatPath.scala 80:25]
    node _T_80 = tail(_T_79, 1) @[DatPath.scala 80:25]
    node _T_82 = add(_T_80, UInt<32>("h04")) @[DatPath.scala 80:35]
    node _T_83 = tail(_T_82, 1) @[DatPath.scala 80:35]
    pc_br <= _T_83 @[DatPath.scala 80:15]
    node _T_85 = eq(io.ctl.ALUctr, UInt<3>("h03")) @[DatPath.scala 82:40]
    node pc4_en = mux(_T_85, UInt<1>("h00"), UInt<1>("h01")) @[DatPath.scala 82:25]
    node _T_89 = eq(pc4_en, UInt<1>("h01")) @[DatPath.scala 86:57]
    node _T_91 = eq(io.ctl.nPC_sel, UInt<1>("h00")) @[DatPath.scala 87:65]
    node _T_92 = and(_T_89, _T_91) @[DatPath.scala 86:68]
    node _T_94 = eq(io.ctl.ExtOp, UInt<1>("h01")) @[DatPath.scala 88:63]
    node _T_96 = eq(pc4_en, UInt<1>("h01")) @[DatPath.scala 88:85]
    node _T_97 = and(_T_94, _T_96) @[DatPath.scala 88:74]
    node _T_99 = eq(io.ctl.nPC_sel, UInt<1>("h01")) @[DatPath.scala 89:65]
    node _T_100 = and(_T_97, _T_99) @[DatPath.scala 88:96]
    node _T_102 = eq(io.ctl.ExtOp, UInt<1>("h00")) @[DatPath.scala 90:63]
    node _T_104 = eq(pc4_en, UInt<1>("h01")) @[DatPath.scala 90:85]
    node _T_105 = and(_T_102, _T_104) @[DatPath.scala 90:75]
    node _T_107 = eq(io.ctl.nPC_sel, UInt<1>("h01")) @[DatPath.scala 91:65]
    node _T_108 = and(_T_105, _T_107) @[DatPath.scala 90:96]
    node _T_110 = eq(pc4_en, UInt<1>("h00")) @[DatPath.scala 92:57]
    node _T_112 = eq(io.ctl.nPC_sel, UInt<1>("h00")) @[DatPath.scala 93:65]
    node _T_113 = and(_T_110, _T_112) @[DatPath.scala 92:69]
    node _T_115 = mux(_T_113, UInt<1>("h00"), pc_plus4) @[Mux.scala 61:16]
    node _T_116 = mux(_T_108, j_target, _T_115) @[Mux.scala 61:16]
    node _T_117 = mux(_T_100, pc_br, _T_116) @[Mux.scala 61:16]
    node _T_118 = mux(_T_92, pc_plus4, _T_117) @[Mux.scala 61:16]
    pc_next <= _T_118 @[DatPath.scala 85:17]
    alu9.io.ALUctr <= io.ctl.ALUctr @[DatPath.scala 98:25]
    alu9.io.in1 <= BusA @[DatPath.scala 99:25]
    node _T_119 = mux(io.ctl.ALUsrc, Imm32, BusB) @[DatPath.scala 100:31]
    alu9.io.in2 <= _T_119 @[DatPath.scala 100:25]
    io.dat.zero <= alu9.io.cmp_out @[DatPath.scala 102:25]
    io.dmem_addr <= alu9.io.ALUout @[DatPath.scala 103:25]
    io.dmem_datIn <= BusB @[DatPath.scala 104:25]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip boot : UInt<1>, flip test_im_wr : UInt<1>, flip test_im_rd : UInt<1>, flip test_im_addr : UInt<32>, flip test_im_in : UInt<32>, test_im_out : UInt<32>, flip test_dm_wr : UInt<1>, flip test_dm_rd : UInt<1>, flip test_dm_addr : UInt<32>, flip test_dm_in : UInt<32>, test_dm_out : UInt<32>, valid : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst cpath of CtlPath @[Top.scala 35:33]
    cpath.io is invalid
    cpath.clock <= clock
    cpath.reset <= reset
    inst dpath of DatPath @[Top.scala 36:33]
    dpath.io is invalid
    dpath.clock <= clock
    dpath.reset <= reset
    dpath.io.ctl.Imm26 <= cpath.io.ctl.Imm26 @[Top.scala 38:22]
    dpath.io.ctl.Imm16 <= cpath.io.ctl.Imm16 @[Top.scala 38:22]
    dpath.io.ctl.Rs <= cpath.io.ctl.Rs @[Top.scala 38:22]
    dpath.io.ctl.Rt <= cpath.io.ctl.Rt @[Top.scala 38:22]
    dpath.io.ctl.Rd <= cpath.io.ctl.Rd @[Top.scala 38:22]
    dpath.io.ctl.MemtoReg <= cpath.io.ctl.MemtoReg @[Top.scala 38:22]
    dpath.io.ctl.ALUsrc <= cpath.io.ctl.ALUsrc @[Top.scala 38:22]
    dpath.io.ctl.ALUctr <= cpath.io.ctl.ALUctr @[Top.scala 38:22]
    dpath.io.ctl.ExtOp <= cpath.io.ctl.ExtOp @[Top.scala 38:22]
    dpath.io.ctl.RegDst <= cpath.io.ctl.RegDst @[Top.scala 38:22]
    dpath.io.ctl.RegWr <= cpath.io.ctl.RegWr @[Top.scala 38:22]
    dpath.io.ctl.nPC_sel <= cpath.io.ctl.nPC_sel @[Top.scala 38:22]
    cpath.io.dat.zero <= dpath.io.dat.zero @[Top.scala 39:22]
    io.valid <= cpath.io.valid @[Top.scala 40:18]
    cpath.io.boot <= io.boot @[Top.scala 41:23]
    cmem imm : UInt<32>[256] @[Top.scala 43:22]
    cmem dmm : UInt<32>[1024] @[Top.scala 44:22]
    io.test_dm_out <= UInt<1>("h00") @[Top.scala 45:24]
    io.test_im_out <= UInt<1>("h00") @[Top.scala 46:24]
    cpath.io.Inst <= UInt<1>("h00") @[Top.scala 47:23]
    node _T_21 = and(io.boot, io.test_im_wr) @[Top.scala 48:23]
    when _T_21 : @[Top.scala 48:40]
      node _T_22 = shr(io.test_im_addr, 2) @[Top.scala 49:37]
      node _T_23 = bits(_T_22, 7, 0)
      infer mport _T_24 = imm[_T_23], clock
      _T_24 <= io.test_im_in @[Top.scala 49:43]
      cpath.io.Inst <= UInt<1>("h00") @[Top.scala 50:31]
      skip @[Top.scala 48:40]
    node _T_26 = and(io.boot, io.test_dm_wr) @[Top.scala 52:23]
    when _T_26 : @[Top.scala 52:40]
      node _T_27 = shr(io.test_dm_addr, 2) @[Top.scala 53:37]
      node _T_28 = bits(_T_27, 9, 0)
      infer mport _T_29 = dmm[_T_28], clock
      _T_29 <= io.test_dm_in @[Top.scala 53:43]
      cpath.io.Inst <= UInt<1>("h00") @[Top.scala 54:31]
      skip @[Top.scala 52:40]
    node _T_31 = and(io.boot, io.test_im_rd) @[Top.scala 56:23]
    when _T_31 : @[Top.scala 56:40]
      node _T_32 = shr(io.test_im_addr, 2) @[Top.scala 57:55]
      node _T_33 = bits(_T_32, 7, 0)
      infer mport _T_34 = imm[_T_33], clock
      io.test_im_out <= _T_34 @[Top.scala 57:32]
      cpath.io.Inst <= UInt<1>("h00") @[Top.scala 58:31]
      skip @[Top.scala 56:40]
    node _T_36 = and(io.boot, io.test_dm_rd) @[Top.scala 60:23]
    when _T_36 : @[Top.scala 60:40]
      node _T_37 = shr(io.test_dm_addr, 2) @[Top.scala 61:55]
      node _T_38 = bits(_T_37, 9, 0)
      infer mport _T_39 = dmm[_T_38], clock
      io.test_dm_out <= _T_39 @[Top.scala 61:32]
      cpath.io.Inst <= UInt<1>("h00") @[Top.scala 62:31]
      skip @[Top.scala 60:40]
    node _T_42 = eq(io.boot, UInt<1>("h00")) @[Top.scala 64:15]
    when _T_42 : @[Top.scala 64:24]
      node _T_44 = shr(dpath.io.imem_addr, 2) @[Top.scala 65:75]
      node _T_45 = bits(_T_44, 7, 0)
      infer mport _T_46 = imm[_T_45], clock
      node _T_47 = mux(io.boot, UInt<1>("h00"), _T_46) @[Top.scala 65:37]
      cpath.io.Inst <= _T_47 @[Top.scala 65:31]
      node _T_48 = shr(dpath.io.dmem_addr, 2) @[Top.scala 66:64]
      node _T_49 = bits(_T_48, 9, 0)
      infer mport _T_50 = dmm[_T_49], clock
      dpath.io.dmem_datOut <= _T_50 @[Top.scala 66:38]
      when cpath.io.MemWr : @[Top.scala 67:39]
        node _T_51 = shr(dpath.io.dmem_addr, 2) @[Top.scala 68:48]
        node _T_52 = bits(_T_51, 9, 0)
        infer mport _T_53 = dmm[_T_52], clock
        _T_53 <= dpath.io.dmem_datIn @[Top.scala 68:54]
        skip @[Top.scala 67:39]
      skip @[Top.scala 64:24]
    reg clk_cnt : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Top.scala 72:30]
    node _T_57 = add(clk_cnt, UInt<1>("h01")) @[Top.scala 73:28]
    node _T_58 = tail(_T_57, 1) @[Top.scala 73:28]
    clk_cnt <= _T_58 @[Top.scala 73:17]
    node _T_59 = shr(io.test_dm_addr, 2) @[Top.scala 82:37]
    node _T_60 = bits(_T_59, 9, 0)
    infer mport _T_61 = dmm[_T_60], clock
    node _T_62 = bits(reset, 0, 0) @[Top.scala 75:15]
    node _T_64 = eq(_T_62, UInt<1>("h00")) @[Top.scala 75:15]
    when _T_64 : @[Top.scala 75:15]
      printf(clock, UInt<1>(1), "Cyc=%d, pc=0x%x, Inst=0x%x, boot=%d, dmem_in = 0x%x, rd_dmm=0x%x, dmm=0x%x\n", clk_cnt, dpath.io.imem_addr, cpath.io.Inst, cpath.io.boot, dpath.io.dmem_datIn, io.test_dm_out, _T_61) @[Top.scala 75:15]
      skip @[Top.scala 75:15]
    
